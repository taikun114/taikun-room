import { jsx as r } from "react/jsx-runtime";
import { forwardRef as a, useState as m, useEffect as f, useContext as g } from "react";
import { Viewport as C, Item as I, ItemIndicator as P, ItemText as h, Root as x, Trigger as V, Value as v, Portal as w, Content as T } from "@radix-ui/react-select";
import { ReactSdkContext as $, getClosestInstance as u } from "@webstudio-is/react-sdk/runtime";
const y = a(({ defaultOpen: t, defaultValue: e, ...n }, o) => {
  const c = n.open ?? t ?? !1, [S, l] = m(c);
  f(() => l(c), [c]);
  const i = n.value ?? e ?? "", [d, p] = m(i);
  return f(() => p(i), [i]), /* @__PURE__ */ r(
    x,
    {
      ...n,
      open: S,
      onOpenChange: l,
      value: d,
      onValueChange: p
    }
  );
}), M = a((t, e) => {
  const { renderer: n } = g($);
  return /* @__PURE__ */ r(V, { onPointerDown: n === "canvas" ? (c) => {
    c.preventDefault();
  } : void 0, ref: e, ...t });
}), N = a((t, e) => /* @__PURE__ */ r(v, { ref: e, ...t })), b = a((t, e) => /* @__PURE__ */ r(w, { children: /* @__PURE__ */ r(T, { ref: e, ...t, position: "popper" }) })), j = C, E = I, U = P, _ = h, s = "@webstudio-is/sdk-components-react-radix", q = {
  onNavigatorUnselect: (t, e) => {
    for (const n of e.instancePath)
      if (n.component === `${s}:SelectContent`) {
        const o = u(
          e.instancePath,
          n,
          `${s}:Select`
        );
        o && t.setMemoryProp(o, "open", void 0);
      }
  },
  onNavigatorSelect: (t, e) => {
    for (const n of e.instancePath)
      if (n.component === `${s}:SelectContent`) {
        const o = u(
          e.instancePath,
          n,
          `${s}:Select`
        );
        o && t.setMemoryProp(o, "open", !0);
      }
  }
};
export {
  y as Select,
  b as SelectContent,
  E as SelectItem,
  U as SelectItemIndicator,
  _ as SelectItemText,
  M as SelectTrigger,
  N as SelectValue,
  j as SelectViewport,
  q as hooksSelect
};
