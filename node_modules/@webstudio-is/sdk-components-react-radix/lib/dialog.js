import { jsx as i } from "react/jsx-runtime";
import { forwardRef as c, useContext as h, useCallback as D, useEffect as m, Children as v, useRef as k } from "react";
import * as a from "@radix-ui/react-dialog";
import { ReactSdkContext as p, getClosestInstance as d } from "@webstudio-is/react-sdk/runtime";
import { useControllableState as w } from "@radix-ui/react-use-controllable-state";
import y from "await-interaction-response";
const C = (t) => {
  const { target: e } = t;
  return !(!(e instanceof HTMLAnchorElement) || e.hasAttribute("href") === !1 || e.href === "#" || e.hasAttribute("target") && e.target === "_blank" || t.ctrlKey || t.metaKey);
}, O = c((t, e) => {
  const { renderer: o } = h(p), [n, s] = w({
    prop: t.open,
    defaultProp: !1,
    onChange: t.onOpenChange
  }), r = D(
    async (l) => {
      await y(), s(l);
    },
    [s]
  );
  return m(() => {
    if (o !== void 0 || n === !1)
      return;
    const l = (u) => {
      const { target: g } = u;
      if (C(u) !== !1) {
        if (!(g instanceof HTMLAnchorElement))
          return !1;
        g.closest('[role="dialog"]') && (r == null || r(!1));
      }
    };
    return window.addEventListener("click", l), () => window.removeEventListener("click", l);
  }, [n, r, o]), /* @__PURE__ */ i(
    a.Root,
    {
      ...t,
      onOpenChange: r,
      open: n
    }
  );
}), x = c(({ children: t, ...e }, o) => {
  const n = v.toArray(t)[0];
  return /* @__PURE__ */ i(a.Trigger, { ref: o, asChild: !0, ...e, children: n ?? /* @__PURE__ */ i("button", { children: "Add button or link" }) });
}), M = c((t, e) => /* @__PURE__ */ i(a.DialogPortal, { children: /* @__PURE__ */ i(a.Overlay, { ref: e, ...t }) })), R = c((t, e) => {
  const o = k(!1), { renderer: n } = h(p);
  return m(() => {
    if (n !== void 0)
      return;
    o.current = !1;
    const s = (r) => {
      const { target: l } = r;
      if (C(r) !== !1) {
        if (!(l instanceof HTMLAnchorElement))
          return !1;
        l.closest('[role="dialog"]') && (o.current = !0);
      }
    };
    return window.addEventListener("click", s), () => window.removeEventListener("click", s);
  }, [n]), /* @__PURE__ */ i(
    a.Content,
    {
      ref: e,
      ...t,
      onCloseAutoFocus: (s) => {
        o.current && s.preventDefault();
      }
    }
  );
}), $ = a.Close, A = "h1", N = c(({ tag: t = A, children: e, ...o }, n) => /* @__PURE__ */ i(a.DialogTitle, { asChild: !0, children: /* @__PURE__ */ i(t, { ref: n, ...o, children: e }) })), S = a.Description, f = "@webstudio-is/sdk-components-react-radix", F = {
  onNavigatorUnselect: (t, e) => {
    for (const o of e.instancePath)
      if (o.component === `${f}:DialogOverlay`) {
        const n = d(
          e.instancePath,
          o,
          `${f}:Dialog`
        );
        n && t.setMemoryProp(n, "open", void 0);
      }
  },
  onNavigatorSelect: (t, e) => {
    for (const o of e.instancePath)
      if (o.component === `${f}:DialogOverlay`) {
        const n = d(
          e.instancePath,
          o,
          `${f}:Dialog`
        );
        n && t.setMemoryProp(n, "open", !0);
      }
  }
};
export {
  O as Dialog,
  $ as DialogClose,
  R as DialogContent,
  S as DialogDescription,
  M as DialogOverlay,
  N as DialogTitle,
  x as DialogTrigger,
  F as hooksDialog
};
