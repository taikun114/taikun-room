import { jsx as c } from "react/jsx-runtime";
import { forwardRef as s, useContext as l } from "react";
import { Viewport as m, Item as p, ItemIndicator as f, ItemText as S, Root as d, Trigger as u, Value as I, Portal as P, Content as g } from "@radix-ui/react-select";
import { ReactSdkContext as x, getClosestInstance as i } from "@webstudio-is/react-sdk/runtime";
const v = s(({ value: e, defaultValue: t, ...o }, n) => /* @__PURE__ */ c(d, { ...o, defaultValue: e ?? t })), T = s((e, t) => {
  const { renderer: o } = l(x);
  return /* @__PURE__ */ c(u, { onPointerDown: o === "canvas" ? (a) => {
    a.preventDefault();
  } : void 0, ref: t, ...e });
}), $ = s((e, t) => /* @__PURE__ */ c(I, { ref: t, ...e })), k = s((e, t) => /* @__PURE__ */ c(P, { children: /* @__PURE__ */ c(g, { ref: t, ...e, position: "popper" }) })), D = m, R = p, y = f, M = S, r = "@webstudio-is/sdk-components-react-radix", N = {
  onNavigatorUnselect: (e, t) => {
    for (const o of t.instancePath)
      if (o.component === `${r}:SelectContent`) {
        const n = i(
          t.instancePath,
          o,
          `${r}:Select`
        );
        n && e.setMemoryProp(n, "open", void 0);
      }
  },
  onNavigatorSelect: (e, t) => {
    for (const o of t.instancePath)
      if (o.component === `${r}:SelectContent`) {
        const n = i(
          t.instancePath,
          o,
          `${r}:Select`
        );
        n && e.setMemoryProp(n, "open", !0);
      }
  }
};
export {
  v as Select,
  k as SelectContent,
  R as SelectItem,
  y as SelectItemIndicator,
  M as SelectItemText,
  T as SelectTrigger,
  $ as SelectValue,
  D as SelectViewport,
  N as hooksSelect
};
