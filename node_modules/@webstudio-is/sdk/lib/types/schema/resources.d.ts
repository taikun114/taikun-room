import { z } from "zod";
export declare const Resource: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodString;
    control: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"system">, z.ZodLiteral<"graphql">]>>;
    method: z.ZodUnion<[z.ZodLiteral<"get">, z.ZodLiteral<"post">, z.ZodLiteral<"put">, z.ZodLiteral<"delete">]>;
    url: z.ZodString;
    searchParams: z.ZodOptional<z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        value: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        value: string;
        name: string;
    }, {
        value: string;
        name: string;
    }>, "many">>;
    headers: z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        value: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        value: string;
        name: string;
    }, {
        value: string;
        name: string;
    }>, "many">;
    body: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    name: string;
    url: string;
    id: string;
    method: "get" | "post" | "put" | "delete";
    headers: {
        value: string;
        name: string;
    }[];
    body?: string | undefined;
    control?: "system" | "graphql" | undefined;
    searchParams?: {
        value: string;
        name: string;
    }[] | undefined;
}, {
    name: string;
    url: string;
    id: string;
    method: "get" | "post" | "put" | "delete";
    headers: {
        value: string;
        name: string;
    }[];
    body?: string | undefined;
    control?: "system" | "graphql" | undefined;
    searchParams?: {
        value: string;
        name: string;
    }[] | undefined;
}>;
export type Resource = z.infer<typeof Resource>;
export declare const ResourceRequest: z.ZodObject<{
    name: z.ZodString;
    method: z.ZodUnion<[z.ZodLiteral<"get">, z.ZodLiteral<"post">, z.ZodLiteral<"put">, z.ZodLiteral<"delete">]>;
    url: z.ZodString;
    searchParams: z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        value: z.ZodUnknown;
    }, "strip", z.ZodTypeAny, {
        name: string;
        value?: unknown;
    }, {
        name: string;
        value?: unknown;
    }>, "many">;
    headers: z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        value: z.ZodUnknown;
    }, "strip", z.ZodTypeAny, {
        name: string;
        value?: unknown;
    }, {
        name: string;
        value?: unknown;
    }>, "many">;
    body: z.ZodOptional<z.ZodUnknown>;
}, "strip", z.ZodTypeAny, {
    name: string;
    url: string;
    method: "get" | "post" | "put" | "delete";
    searchParams: {
        name: string;
        value?: unknown;
    }[];
    headers: {
        name: string;
        value?: unknown;
    }[];
    body?: unknown;
}, {
    name: string;
    url: string;
    method: "get" | "post" | "put" | "delete";
    searchParams: {
        name: string;
        value?: unknown;
    }[];
    headers: {
        name: string;
        value?: unknown;
    }[];
    body?: unknown;
}>;
export type ResourceRequest = z.infer<typeof ResourceRequest>;
export declare const Resources: z.ZodMap<z.ZodString, z.ZodObject<{
    id: z.ZodString;
    name: z.ZodString;
    control: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"system">, z.ZodLiteral<"graphql">]>>;
    method: z.ZodUnion<[z.ZodLiteral<"get">, z.ZodLiteral<"post">, z.ZodLiteral<"put">, z.ZodLiteral<"delete">]>;
    url: z.ZodString;
    searchParams: z.ZodOptional<z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        value: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        value: string;
        name: string;
    }, {
        value: string;
        name: string;
    }>, "many">>;
    headers: z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        value: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        value: string;
        name: string;
    }, {
        value: string;
        name: string;
    }>, "many">;
    body: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    name: string;
    url: string;
    id: string;
    method: "get" | "post" | "put" | "delete";
    headers: {
        value: string;
        name: string;
    }[];
    body?: string | undefined;
    control?: "system" | "graphql" | undefined;
    searchParams?: {
        value: string;
        name: string;
    }[] | undefined;
}, {
    name: string;
    url: string;
    id: string;
    method: "get" | "post" | "put" | "delete";
    headers: {
        value: string;
        name: string;
    }[];
    body?: string | undefined;
    control?: "system" | "graphql" | undefined;
    searchParams?: {
        value: string;
        name: string;
    }[] | undefined;
}>>;
export type Resources = z.infer<typeof Resources>;
