import type { Instances, Instance, Props, Scope, DataSources, Prop, WsComponentMeta, IndexesWithinAncestors } from "@webstudio-is/sdk";
export declare const generateJsxElement: ({ context, scope, metas, tagsOverrides, instance, props, dataSources, usedDataSources, indexesWithinAncestors, children, classesMap, }: {
    context?: "expression" | "jsx";
    scope: Scope;
    metas: Map<Instance["component"], WsComponentMeta>;
    /**
     * Record<tag, componentDescriptor>
     */
    tagsOverrides?: Record<string, string>;
    instance: Instance;
    props: Props;
    dataSources: DataSources;
    usedDataSources: DataSources;
    indexesWithinAncestors: IndexesWithinAncestors;
    children: string;
    classesMap?: Map<string, Array<string>>;
}) => string;
export declare const generateJsxChildren: ({ scope, metas, tagsOverrides, children, instances, props, dataSources, usedDataSources, indexesWithinAncestors, classesMap, excludePlaceholders, }: {
    scope: Scope;
    metas: Map<Instance["component"], WsComponentMeta>;
    tagsOverrides?: Record<string, string>;
    children: Instance["children"];
    instances: Instances;
    props: Props;
    dataSources: DataSources;
    usedDataSources: DataSources;
    indexesWithinAncestors: IndexesWithinAncestors;
    classesMap?: Map<string, Array<string>>;
    excludePlaceholders?: boolean;
}) => string;
export declare const generateWebstudioComponent: ({ scope, name, rootInstanceId, parameters, instances, props, dataSources, metas, tagsOverrides, classesMap, }: {
    scope: Scope;
    name: string;
    rootInstanceId: Instance["id"];
    parameters: Extract<Prop, {
        type: "parameter";
    }>[];
    instances: Instances;
    props: Props;
    dataSources: DataSources;
    classesMap: Map<string, Array<string>>;
    metas: Map<Instance["component"], WsComponentMeta>;
    /**
     * Record<tag, componentDescriptor>
     */
    tagsOverrides?: Record<string, string>;
}) => string;
