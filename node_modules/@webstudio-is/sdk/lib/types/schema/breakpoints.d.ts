import { z } from "zod";
export declare const Breakpoint: z.ZodEffects<z.ZodObject<{
    id: z.ZodString;
    label: z.ZodString;
    minWidth: z.ZodOptional<z.ZodNumber>;
    maxWidth: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    label: string;
    id: string;
    maxWidth?: number | undefined;
    minWidth?: number | undefined;
}, {
    label: string;
    id: string;
    maxWidth?: number | undefined;
    minWidth?: number | undefined;
}>, {
    label: string;
    id: string;
    maxWidth?: number | undefined;
    minWidth?: number | undefined;
}, {
    label: string;
    id: string;
    maxWidth?: number | undefined;
    minWidth?: number | undefined;
}>;
export type Breakpoint = z.infer<typeof Breakpoint>;
export declare const Breakpoints: z.ZodMap<z.ZodString, z.ZodEffects<z.ZodObject<{
    id: z.ZodString;
    label: z.ZodString;
    minWidth: z.ZodOptional<z.ZodNumber>;
    maxWidth: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    label: string;
    id: string;
    maxWidth?: number | undefined;
    minWidth?: number | undefined;
}, {
    label: string;
    id: string;
    maxWidth?: number | undefined;
    minWidth?: number | undefined;
}>, {
    label: string;
    id: string;
    maxWidth?: number | undefined;
    minWidth?: number | undefined;
}, {
    label: string;
    id: string;
    maxWidth?: number | undefined;
    minWidth?: number | undefined;
}>>;
export type Breakpoints = z.infer<typeof Breakpoints>;
export declare const initialBreakpoints: Array<Breakpoint>;
