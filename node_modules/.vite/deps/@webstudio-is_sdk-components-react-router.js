import "./chunk-R5AY5DVU.js";
import {
  Form,
  NavLink,
  Scripts,
  ScrollRestoration,
  useFetcher
} from "./chunk-TVU2D7RQ.js";
import {
  a
} from "./chunk-X5H5XJ3G.js";
import "./chunk-HQO5VOYS.js";
import "./chunk-UJZI4J2C.js";
import {
  ReactSdkContext
} from "./chunk-VMAQZZ5X.js";
import {
  formBotFieldName,
  formIdFieldName
} from "./chunk-FFVU4N47.js";
import {
  require_jsx_runtime
} from "./chunk-A7TAK4KR.js";
import {
  require_react
} from "./chunk-OXMAUKK4.js";
import {
  __toESM
} from "./chunk-DC5AMYBS.js";

// node_modules/@webstudio-is/sdk-components-react-router/lib/components.js
var import_react = __toESM(require_react());
var import_jsx_runtime = __toESM(require_jsx_runtime());
var import_react2 = __toESM(require_react());
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var import_react3 = __toESM(require_react());
var import_jsx_runtime3 = __toESM(require_jsx_runtime());
var import_react4 = __toESM(require_react());
var import_jsx_runtime4 = __toESM(require_jsx_runtime());
var Body = (0, import_react.forwardRef)(
  ({ children, ...props }, ref) => (0, import_jsx_runtime.jsxs)("body", { ...props, ref, children: [
    children,
    (0, import_jsx_runtime.jsx)(Scripts, {}),
    (0, import_jsx_runtime.jsx)(ScrollRestoration, {})
  ] })
);
Body.displayName = "Body";
var Link = (0, import_react2.forwardRef)((props, ref) => {
  const { assetBaseUrl } = (0, import_react2.useContext)(ReactSdkContext);
  const href = String(props.href ?? "");
  if (
    // remix appends ?index in runtime but not in ssr
    href === "" || href.startsWith("?") || href.startsWith("/") && href.startsWith(assetBaseUrl) === false
  ) {
    return (0, import_jsx_runtime2.jsx)(NavLink, { ...props, to: href, ref, end: true });
  }
  const { prefetch, reloadDocument, replace, preventScrollReset, ...rest } = props;
  return (0, import_jsx_runtime2.jsx)(a, { ...rest, ref });
});
Link.displayName = a.displayName;
var useOnFetchEnd = (fetcher, handler) => {
  const latestHandler = (0, import_react3.useRef)(handler);
  latestHandler.current = handler;
  const prevFetcher = (0, import_react3.useRef)(fetcher);
  (0, import_react3.useEffect)(() => {
    if (prevFetcher.current.state !== fetcher.state && fetcher.state === "idle" && fetcher.data !== void 0) {
      latestHandler.current(fetcher.data);
    }
    prevFetcher.current = fetcher;
  }, [fetcher]);
};
var gcd = (a2, b) => b === 0 ? a2 : gcd(b, a2 % b);
var getAspectRatioString = (width, height) => {
  const r = gcd(width, height);
  const aspectRatio = `${width / r}/${height / r}`;
  return aspectRatio;
};
var isJSDom = () => {
  if (typeof matchMedia === "undefined") {
    return true;
  }
  const { width, height } = screen;
  const deviceAspectRatio = getAspectRatioString(width, height);
  const matchAspectRatio = matchMedia(
    `(device-aspect-ratio: ${deviceAspectRatio})`
  ).matches;
  const matchWidthHeight = matchMedia(
    `(device-width: ${width}px) and (device-height: ${height}px)`
  ).matches;
  const matchWidthHeightFail = matchMedia(
    `(device-width: ${width - 1}px) and (device-height: ${height}px)`
  ).matches;
  const matchLight = matchMedia("(prefers-color-scheme: light)").matches;
  const matchDark = matchMedia("(prefers-color-scheme: dark)").matches;
  const hasMatchMedia = matchAspectRatio && matchWidthHeight && !matchWidthHeightFail && matchLight !== matchDark;
  return hasMatchMedia === false;
};
var WebhookForm = (0, import_react3.forwardRef)(
  ({ children, action, method, state = "initial", onStateChange, ...rest }, ref) => {
    const fetcher = useFetcher();
    useOnFetchEnd(fetcher, (data) => {
      const state2 = (data == null ? void 0 : data.success) === true ? "success" : "error";
      onStateChange == null ? void 0 : onStateChange(state2);
    });
    const handleSubmitAndAddHiddenJsField = (event) => {
      const hiddenInput = document.createElement("input");
      hiddenInput.type = "hidden";
      hiddenInput.name = formBotFieldName;
      hiddenInput.value = isJSDom() ? "jsdom" : Date.now().toString(16);
      event.currentTarget.appendChild(hiddenInput);
    };
    return (0, import_jsx_runtime3.jsxs)(
      fetcher.Form,
      {
        ...rest,
        method: "post",
        "data-state": state,
        ref,
        onSubmit: handleSubmitAndAddHiddenJsField,
        children: [
          (0, import_jsx_runtime3.jsx)(
            "input",
            {
              type: "hidden",
              name: formIdFieldName,
              value: action == null ? void 0 : action.toString()
            }
          ),
          children
        ]
      }
    );
  }
);
WebhookForm.displayName = "WebhookForm";
var RemixForm = (0, import_react4.forwardRef)(({ action, method, ...props }, ref) => {
  if (method === "dialog") {
    return (0, import_jsx_runtime4.jsx)("form", { ...props, ref });
  }
  if (action === void 0 || action === "" || typeof action === "string" && (action == null ? void 0 : action.startsWith("/"))) {
    return (0, import_jsx_runtime4.jsx)(
      Form,
      {
        action,
        method,
        ...props,
        ref,
        preventScrollReset: action === void 0 || action === ""
      }
    );
  }
  return (0, import_jsx_runtime4.jsx)("form", { ...props, ref });
});
RemixForm.displayName = "Form";
export {
  Body,
  WebhookForm as Form,
  Link,
  RemixForm,
  Link as RichTextLink
};
//# sourceMappingURL=@webstudio-is_sdk-components-react-router.js.map
