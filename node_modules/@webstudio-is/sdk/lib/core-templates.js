// src/core-templates.tsx
import {
  $,
  css,
  expression,
  Parameter,
  ws
} from "@webstudio-is/template";

// src/core-metas.ts
import {
  ContentBlockIcon,
  ListViewIcon,
  PaintBrushIcon,
  SettingsIcon,
  AddTemplateInstanceIcon,
  HtmlElementIcon
} from "@webstudio-is/icons/svg";

// src/__generated__/normalize.css.ts
var html = [
  { property: "display", value: { type: "keyword", value: "grid" } },
  { property: "min-height", value: { type: "unit", unit: "%", value: 100 } },
  {
    property: "font-family",
    value: { type: "fontFamily", value: ["Arial", "Roboto", "sans-serif"] }
  },
  { property: "font-size", value: { type: "unit", unit: "px", value: 16 } },
  {
    property: "line-height",
    value: { type: "unit", unit: "number", value: 1.2 }
  },
  {
    property: "white-space-collapse",
    value: { type: "keyword", value: "preserve" }
  }
];

// src/core-metas.ts
var rootComponent = "ws:root";
var rootMeta = {
  label: "Global Root",
  icon: SettingsIcon,
  presetStyle: {
    html
  }
};
var rootPropsMeta = {
  props: {}
};
var elementComponent = "ws:element";
var elementMeta = {
  label: "Element",
  icon: HtmlElementIcon
};
var elementPropsMeta = {
  props: {}
};
var collectionComponent = "ws:collection";
var collectionMeta = {
  label: "Collection",
  icon: ListViewIcon,
  contentModel: {
    category: "instance",
    children: ["instance"]
  }
};
var collectionPropsMeta = {
  props: {
    data: {
      required: true,
      control: "json",
      type: "json"
    }
  },
  initialProps: ["data"]
};
var descendantComponent = "ws:descendant";
var descendantMeta = {
  label: "Descendant",
  icon: PaintBrushIcon,
  contentModel: {
    category: "none",
    children: []
  },
  // @todo infer possible presets
  presetStyle: {}
};
var descendantPropsMeta = {
  props: {
    selector: {
      required: true,
      type: "string",
      control: "select",
      options: [
        " p",
        " h1",
        " h2",
        " h3",
        " h4",
        " h5",
        " h6",
        " :where(strong, b)",
        " :where(em, i)",
        " a",
        " img",
        " blockquote",
        " code",
        " :where(ul, ol)",
        " li",
        " hr"
      ]
    }
  },
  initialProps: ["selector"]
};
var blockComponent = "ws:block";
var blockTemplateComponent = "ws:block-template";
var blockTemplateMeta = {
  icon: AddTemplateInstanceIcon,
  contentModel: {
    category: "none",
    children: ["instance"]
  }
};
var blockTemplatePropsMeta = {
  props: {}
};
var blockMeta = {
  label: "Content Block",
  icon: ContentBlockIcon,
  contentModel: {
    category: "instance",
    children: [blockTemplateComponent, "instance"]
  }
};
var blockPropsMeta = {
  props: {}
};
var coreMetas = {
  [rootComponent]: rootMeta,
  [elementComponent]: elementMeta,
  [collectionComponent]: collectionMeta,
  [descendantComponent]: descendantMeta,
  [blockComponent]: blockMeta,
  [blockTemplateComponent]: blockTemplateMeta
};
var corePropsMetas = {
  [rootComponent]: rootPropsMeta,
  [elementComponent]: elementPropsMeta,
  [collectionComponent]: collectionPropsMeta,
  [descendantComponent]: descendantPropsMeta,
  [blockComponent]: blockPropsMeta,
  [blockTemplateComponent]: blockTemplatePropsMeta
};

// src/core-templates.tsx
import { jsx, jsxs } from "react/jsx-runtime";
var collectionItem = new Parameter("collectionItem");
var collectionMeta2 = {
  category: "data",
  order: 2,
  template: /* @__PURE__ */ jsx(
    ws.collection,
    {
      data: ["Collection Item 1", "Collection Item 2", "Collection Item 3"],
      item: collectionItem,
      children: /* @__PURE__ */ jsx($.Box, { children: /* @__PURE__ */ jsx($.Text, { children: expression`${collectionItem}` }) })
    }
  )
};
var descendantMeta2 = {
  category: "internal",
  template: /* @__PURE__ */ jsx(ws.descendant, { selector: " p" })
};
var BlockTemplate = ws["block-template"];
var blockMeta2 = {
  category: "typography",
  template: /* @__PURE__ */ jsxs(ws.block, { children: [
    /* @__PURE__ */ jsxs(BlockTemplate, { "ws:label": "Templates", children: [
      /* @__PURE__ */ jsx($.Paragraph, {}),
      /* @__PURE__ */ jsx($.Heading, { "ws:label": "Heading 1", "ws:tag": "h1" }),
      /* @__PURE__ */ jsx($.Heading, { "ws:label": "Heading 2", "ws:tag": "h2" }),
      /* @__PURE__ */ jsx($.Heading, { "ws:label": "Heading 3", "ws:tag": "h3" }),
      /* @__PURE__ */ jsx($.Heading, { "ws:label": "Heading 4", "ws:tag": "h4" }),
      /* @__PURE__ */ jsx($.Heading, { "ws:label": "Heading 5", "ws:tag": "h5" }),
      /* @__PURE__ */ jsx($.Heading, { "ws:label": "Heading 6", "ws:tag": "h6" }),
      /* @__PURE__ */ jsx($.List, { "ws:label": "List (Unordered)", children: /* @__PURE__ */ jsx($.ListItem, {}) }),
      /* @__PURE__ */ jsx($.List, { "ws:label": "List (Ordered)", ordered: true, children: /* @__PURE__ */ jsx($.ListItem, {}) }),
      /* @__PURE__ */ jsx($.Link, {}),
      /* @__PURE__ */ jsx(
        $.Image,
        {
          "ws:style": css`
            margin-right: auto;
            margin-left: auto;
            width: 100%;
            height: auto;
          `
        }
      ),
      /* @__PURE__ */ jsx($.Separator, {}),
      /* @__PURE__ */ jsx($.Blockquote, {}),
      /* @__PURE__ */ jsx($.HtmlEmbed, {}),
      /* @__PURE__ */ jsx($.CodeText, {})
    ] }),
    /* @__PURE__ */ jsxs($.Paragraph, { children: [
      "The Content Block component designates regions on the page where pre-styled instances can be inserted in",
      " ",
      /* @__PURE__ */ jsx($.RichTextLink, { href: "https://wstd.us/content-block", children: "Content mode" }),
      "."
    ] }),
    /* @__PURE__ */ jsxs($.List, { children: [
      /* @__PURE__ */ jsx($.ListItem, { children: "In Content mode, you can edit any direct child instances that were pre-added to the Content Block, as well as add new instances predefined in Templates." }),
      /* @__PURE__ */ jsx($.ListItem, { children: "To predefine instances for insertion in Content mode, switch to Design mode and add them to the Templates container." }),
      /* @__PURE__ */ jsx($.ListItem, { children: "To insert predefined instances in Content mode, click the + button while hovering over the Content Block on the canvas and choose an instance from the list." })
    ] })
  ] })
};
var coreTemplates = {
  [collectionComponent]: collectionMeta2,
  [descendantComponent]: descendantMeta2,
  [blockComponent]: blockMeta2
};
export {
  coreTemplates
};
