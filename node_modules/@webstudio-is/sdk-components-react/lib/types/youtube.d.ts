import { type ComponentProps } from "react";
/**
 * Options for configuring the YouTube player parameters.
 * https://developers.google.com/youtube/player_parameters
 */
type YouTubePlayerParameters = {
    /**
     * Whether the video should autoplay.
     * Some browsers require the `muted` parameter to be set to `true` for autoplay to work.
     * @default false
     */
    autoplay?: boolean;
    /**
     * Whether the video should start muted.
     * Useful for enabling autoplay in browsers that require videos to be muted.
     * Original parameter: `mute`
     *@default false
     */
    muted?: boolean;
    /**
     * Whether to show player controls.
     * @default true
     */
    showControls?: boolean;
    /**
     * Whether to show related videos at the end.
     * Original parameter: `rel`
     * @default true
     */
    showRelatedVideos?: boolean;
    /**
     * Whether to enable keyboard controls.
     * @default true
     */
    keyboard?: boolean;
    /**
     * Whether the video should loop continuously.
     * @default false
     */
    loop?: boolean;
    /**
     * Whether to play inline on mobile (not fullscreen).
     * @default false
     */
    inline?: boolean;
    /**
     * Whether to allow fullscreen mode.
     * Original parameter: `fs`
     * @default true
     */
    allowFullscreen?: boolean;
    /**
     * Whether captions should be shown by default.
     * Original parameter: `cc_load_policy`
     * @default false
     */
    showCaptions?: boolean;
    /**
     * Whether to show annotations on the video.
     * Original parameter: `iv_load_policy`
     * @default true
     */
    showAnnotations?: boolean;
    /**
     * Start time of the video in seconds.
     * Original parameter: `start`
     */
    startTime?: number;
    /**
     * End time of the video in seconds.
     * Original parameter: `end`
     */
    endTime?: number;
    /**
     * Whether to disable keyboard controls.
     * Original parameter: `disablekb`
     * @default false
     */
    disableKeyboard?: boolean;
    /**
     * Referrer URL for tracking purposes.
     * Original parameter: `widget_referrer`
     */
    referrer?: string;
    /**
     * Type of playlist to load.
     */
    listType?: "playlist" | "user_uploads";
    /**
     * ID of the playlist to load.
     * Original parameter: `list`
     */
    listId?: string;
    /**
     * Your domain for API compliance (e.g., `https://yourdomain.com`).
     */
    origin?: string;
    /**
     * Specifies the default language that the player will use to display captions.
     * The value is an ISO 639-1 two-letter language code.
     * Original parameter: `cc_lang_pref`
     */
    captionLanguage?: string;
    /**
     * Sets the player's interface language. The value is an ISO 639-1 two-letter language code or a fully specified locale.
     * Original parameter: `hl`
     */
    language?: string;
    /**
     * Specifies the color that will be used in the player's video progress bar to highlight the amount of the video that the viewer has already seen.
     * Valid values are 'red' and 'white'.
     */
    color?: "red" | "white";
    /**
     * This parameter specifies a comma-separated list of video IDs to play
     */
    playlist?: string;
};
type YouTubePlayerOptions = {
    /** The YouTube video URL or ID */
    url?: string;
    showPreview?: boolean;
    /**
     * The Privacy Enhanced Mode of the YouTube embedded player prevents the use of views of embedded YouTube content from influencing the viewerâ€™s browsing experience on YouTube.
     * https://support.google.com/youtube/answer/171780?hl=en#zippy=%2Cturn-on-privacy-enhanced-mode
     * @default true
     */
    privacyEnhancedMode?: boolean;
} & YouTubePlayerParameters & {
    /** Loading strategy for iframe */
    loading?: "eager" | "lazy";
};
declare const defaultTag = "div";
type Props = Omit<ComponentProps<typeof defaultTag>, keyof YouTubePlayerOptions> & YouTubePlayerOptions & {
    /**
     * The `title` attribute for the iframe.
     * Improves accessibility by providing a brief description of the video content for screen readers.
     * Example: "Video about web development tips".
     */
    title?: string | undefined;
};
export declare const YouTube: import("react").ForwardRefExoticComponent<Omit<Props, "ref"> & import("react").RefAttributes<HTMLDivElement>>;
export {};
