import { jsx as n } from "react/jsx-runtime";
import { forwardRef as c, Children as P } from "react";
import * as i from "@radix-ui/react-popover";
import { getClosestInstance as p } from "@webstudio-is/react-sdk/runtime";
const v = c((o, t) => /* @__PURE__ */ n(i.Root, { ...o })), d = c(({ children: o, ...t }, e) => {
  const r = P.toArray(o)[0];
  return /* @__PURE__ */ n(i.Trigger, { asChild: !0, ref: e, ...t, children: r ?? /* @__PURE__ */ n("button", { children: "Add button or link" }) });
}), h = c(
  ({ sideOffset: o = 4, align: t = "center", hideWhenDetached: e = !0, ...r }, a) => /* @__PURE__ */ n(i.Portal, { children: /* @__PURE__ */ n(
    i.Content,
    {
      ref: a,
      align: "center",
      sideOffset: o,
      hideWhenDetached: e,
      ...r
    }
  ) })
), C = i.Close, s = "@webstudio-is/sdk-components-react-radix", g = {
  onNavigatorUnselect: (o, t) => {
    for (const e of t.instancePath)
      if (e.component === `${s}:PopoverContent`) {
        const r = p(
          t.instancePath,
          e,
          `${s}:Popover`
        );
        r && o.setMemoryProp(r, "open", void 0);
      }
  },
  onNavigatorSelect: (o, t) => {
    for (const e of t.instancePath)
      if (e.component === `${s}:PopoverContent`) {
        const r = p(
          t.instancePath,
          e,
          `${s}:Popover`
        );
        r && o.setMemoryProp(r, "open", !0);
      }
  }
};
export {
  v as Popover,
  C as PopoverClose,
  h as PopoverContent,
  d as PopoverTrigger,
  g as hooksPopover
};
