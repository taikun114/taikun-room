import { jsx as i } from "react/jsx-runtime";
import f from "await-interaction-response";
import { forwardRef as c, useState as b, useEffect as T, useCallback as d } from "react";
import { List as p, Root as h, Trigger as v, Content as P } from "@radix-ui/react-tabs";
import { getIndexWithinAncestorFromProps as l } from "@webstudio-is/sdk/runtime";
import { getClosestInstance as u } from "@webstudio-is/react-sdk/runtime";
const w = c(
  ({ defaultValue: n, ...e }, o) => {
    const t = e.value ?? n ?? "", [s, a] = b(t);
    T(() => a(t), [t]);
    const m = d(async (g) => {
      await f(), a(g);
    }, []);
    return /* @__PURE__ */ i(
      h,
      {
        ref: o,
        ...e,
        value: s,
        onValueChange: m
      }
    );
  }
), y = p, A = c(({ value: n, ...e }, o) => {
  const t = l(e);
  return /* @__PURE__ */ i(v, { ref: o, value: n ?? t ?? "", ...e });
}), R = c(({ value: n, ...e }, o) => {
  const t = l(e);
  return /* @__PURE__ */ i(P, { ref: o, value: n ?? t ?? "", ...e });
}), r = "@webstudio-is/sdk-components-react-radix", W = {
  onNavigatorSelect: (n, e) => {
    var o;
    for (const t of e.instancePath)
      if (t.component === `${r}:TabsContent` || t.component === `${r}:TabsTrigger`) {
        const s = u(
          e.instancePath,
          t,
          `${r}:Tabs`
        ), a = n.getPropValue(t, "value") ?? ((o = n.indexesWithinAncestors.get(t.id)) == null ? void 0 : o.toString());
        s && a && n.setMemoryProp(s, "value", a);
      }
  },
  onNavigatorUnselect: (n, e) => {
    var o;
    for (const t of e.instancePath)
      if (t.component === `${r}:TabsContent` || t.component === `${r}:TabsTrigger`) {
        const s = u(
          e.instancePath,
          t,
          `${r}:Tabs`
        ), a = n.getPropValue(t, "value") ?? ((o = n.indexesWithinAncestors.get(t.id)) == null ? void 0 : o.toString());
        s && a && n.setMemoryProp(s, "value", void 0);
      }
  }
};
export {
  w as Tabs,
  R as TabsContent,
  y as TabsList,
  A as TabsTrigger,
  W as hooksTabs
};
