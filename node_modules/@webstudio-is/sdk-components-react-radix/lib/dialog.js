import { jsx as s } from "react/jsx-runtime";
import v from "await-interaction-response";
import { forwardRef as c, useContext as p, useState as k, useEffect as d, useCallback as w, Children as y, useRef as A } from "react";
import * as a from "@radix-ui/react-dialog";
import { ReactSdkContext as D, getClosestInstance as m } from "@webstudio-is/react-sdk/runtime";
const C = (t) => {
  const { target: e } = t;
  return !(!(e instanceof HTMLAnchorElement) || e.hasAttribute("href") === !1 || e.href === "#" || e.hasAttribute("target") && e.target === "_blank" || t.ctrlKey || t.metaKey);
}, O = c((t, e) => {
  const { renderer: n } = p(D), o = t.open ?? !1, [r, l] = k(o);
  d(() => l(o), [o]);
  const i = w(async (f) => {
    await v(), l(f);
  }, []);
  return d(() => {
    if (n !== void 0 || r === !1)
      return;
    const f = (g) => {
      const { target: h } = g;
      if (C(g) !== !1) {
        if (!(h instanceof HTMLAnchorElement))
          return !1;
        h.closest('[role="dialog"]') && (i == null || i(!1));
      }
    };
    return window.addEventListener("click", f), () => window.removeEventListener("click", f);
  }, [r, i, n]), /* @__PURE__ */ s(
    a.Root,
    {
      ...t,
      onOpenChange: i,
      open: r
    }
  );
}), x = c(({ children: t, ...e }, n) => {
  const o = y.toArray(t)[0];
  return /* @__PURE__ */ s(a.Trigger, { ref: n, asChild: !0, ...e, children: o ?? /* @__PURE__ */ s("button", { children: "Add button or link" }) });
}), M = c((t, e) => /* @__PURE__ */ s(a.DialogPortal, { children: /* @__PURE__ */ s(a.Overlay, { ref: e, ...t }) })), R = c((t, e) => {
  const n = A(!1), { renderer: o } = p(D);
  return d(() => {
    if (o !== void 0)
      return;
    n.current = !1;
    const r = (l) => {
      const { target: i } = l;
      if (C(l) !== !1) {
        if (!(i instanceof HTMLAnchorElement))
          return !1;
        i.closest('[role="dialog"]') && (n.current = !0);
      }
    };
    return window.addEventListener("click", r), () => window.removeEventListener("click", r);
  }, [o]), /* @__PURE__ */ s(
    a.Content,
    {
      ref: e,
      ...t,
      onCloseAutoFocus: (r) => {
        n.current && r.preventDefault();
      }
    }
  );
}), $ = a.Close, E = "h1", N = c(({ tag: t = E, children: e, ...n }, o) => /* @__PURE__ */ s(a.DialogTitle, { asChild: !0, children: /* @__PURE__ */ s(t, { ref: o, ...n, children: e }) })), S = a.Description, u = "@webstudio-is/sdk-components-react-radix", F = {
  onNavigatorUnselect: (t, e) => {
    for (const n of e.instancePath)
      if (n.component === `${u}:DialogOverlay`) {
        const o = m(
          e.instancePath,
          n,
          `${u}:Dialog`
        );
        o && t.setMemoryProp(o, "open", void 0);
      }
  },
  onNavigatorSelect: (t, e) => {
    for (const n of e.instancePath)
      if (n.component === `${u}:DialogOverlay`) {
        const o = m(
          e.instancePath,
          n,
          `${u}:Dialog`
        );
        o && t.setMemoryProp(o, "open", !0);
      }
  }
};
export {
  O as Dialog,
  $ as DialogClose,
  R as DialogContent,
  S as DialogDescription,
  M as DialogOverlay,
  N as DialogTitle,
  x as DialogTrigger,
  F as hooksDialog
};
