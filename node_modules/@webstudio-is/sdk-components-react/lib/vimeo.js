import { jsx as s, jsxs as q, Fragment as A } from "react/jsx-runtime";
import { colord as B } from "colord";
import { createContext as T, forwardRef as z, useState as y, useContext as G, useRef as H, useEffect as v } from "react";
import { ReactSdkContext as Y } from "@webstudio-is/react-sdk/runtime";
const J = (e) => {
  if (e.url === void 0)
    return;
  let t;
  try {
    const n = new URL(e.url);
    t = new URL(M), t.pathname = `/video${n.pathname}`;
  } catch {
  }
  if (t === void 0)
    return;
  const r = {
    showPortrait: "portrait",
    showByline: "byline",
    showTitle: "title",
    controlsColor: "color",
    showControls: "controls",
    interactiveParams: "interactive_params",
    backgroundMode: "background",
    doNotTrack: "dnt"
  };
  let o;
  for (o in e) {
    const n = e[o];
    if (o === "url" || n === void 0)
      continue;
    const i = r[o] ?? o;
    t.searchParams.append(i, n.toString());
  }
  if (t.searchParams.set("autoplay", "true"), typeof e.controlsColor == "string") {
    const n = B(e.controlsColor).toHex().replace("#", "");
    t.searchParams.set("color", n);
  }
  return e.showPortrait && t.searchParams.set("title", "true"), e.showByline && (t.searchParams.set("portrait", "true"), t.searchParams.set("title", "true")), t.toString();
}, w = (e) => {
  const t = document.createElement("link");
  t.rel = "preconnect", t.href = e, t.crossOrigin = "true", document.head.appendChild(t);
};
let U = !1;
const K = "https://f.vimeocdn.com", M = "https://player.vimeo.com", S = "https://i.vimeocdn.com", Q = () => {
  U || window.matchMedia("(hover: none)").matches || (w(K), w(M), w(S), U = !0);
}, W = (e) => {
  try {
    const r = new URL(e).pathname.split("/")[2];
    return r === "" || r == null ? void 0 : r;
  } catch {
  }
}, X = async (e) => {
  const r = `https://vimeo.com/api/v2/video/${W(e)}.json`, n = (await (await fetch(r)).json())[0].thumbnail_large, i = n.substr(n.lastIndexOf("/") + 1).split("_")[0], a = new URL(S);
  return a.pathname = `/video/${i}.webp`, a.searchParams.append("mw", "1100"), a.searchParams.append("mh", "619"), a.searchParams.append("q", "70"), a;
}, Z = () => /* @__PURE__ */ s(
  "div",
  {
    style: {
      display: "flex",
      width: "100%",
      height: "100%",
      alignItems: "center",
      justifyContent: "center",
      fontSize: "1.2em"
    },
    children: 'Open the "Settings" panel and paste a video URL, e.g. https://vimeo.com/831343124.'
  }
), tt = (e) => {
  const t = "ontouchstart" in window;
  (window.matchMedia("(max-width: 1024px)").matches || t) && e.requestFullscreen();
}, et = ({
  title: e,
  status: t,
  loading: r,
  videoUrl: o,
  previewImageUrl: n,
  autoplay: i,
  renderer: a,
  showPreview: u,
  playsinline: f,
  onStatusChange: c,
  onPreviewImageUrlChange: l
}) => {
  const [m, h] = y(0), d = H(null);
  if (v(() => {
    i && a !== "canvas" && t === "initial" && c("loading");
  }, [i, t, a, c]), v(() => {
    a !== "canvas" && Q();
  }, [a]), v(() => {
    if (o !== void 0) {
      if (u === !1) {
        l(void 0);
        return;
      }
      n === void 0 && X(o).then(l).catch(() => {
        console.error(`Could not load preview image for ${o}`);
      });
    }
  }, [l, u, o, n]), !(a === "canvas" || t === "initial"))
    return /* @__PURE__ */ s(
      "iframe",
      {
        ref: d,
        title: e,
        src: o,
        loading: r,
        allow: "accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture;",
        allowFullScreen: !0,
        style: {
          position: "absolute",
          width: "100%",
          height: "100%",
          opacity: m,
          transition: "opacity 1s",
          border: "none"
        },
        onLoad: () => {
          c("ready"), h(1), d.current && !f && !i && tt(d.current);
        }
      }
    );
}, ot = T({
  onInitPlayer: () => {
  },
  status: "initial"
}), rt = z(
  ({
    url: e,
    loading: t = "lazy",
    autoplay: r = !1,
    autopause: o = !0,
    showByline: n = !1,
    showControls: i = !0,
    doNotTrack: a = !1,
    keyboard: u = !0,
    loop: f = !1,
    muted: c = !1,
    pip: l = !1,
    playsinline: m = !1,
    showPortrait: h = !0,
    quality: d = "auto",
    responsive: L = !0,
    speed: k = !1,
    showTitle: E = !1,
    transparent: _ = !0,
    showPreview: j = !1,
    autopip: F,
    controlsColor: N,
    interactiveParams: O,
    texttrack: V,
    children: D,
    ...g
  }, p) => {
    const [P, C] = y("initial"), [x, $] = y(), { renderer: R } = G(Y), b = J({
      url: e,
      autoplay: r,
      autopause: o,
      showControls: i,
      controlsColor: N,
      doNotTrack: a,
      interactiveParams: O,
      keyboard: u,
      loop: f,
      muted: c,
      pip: l,
      playsinline: m,
      quality: d,
      responsive: L,
      speed: k,
      texttrack: V,
      showTitle: E,
      transparent: _,
      showPortrait: h,
      autopip: F
    });
    return /* @__PURE__ */ s(
      ot.Provider,
      {
        value: {
          status: P,
          previewImageUrl: x,
          onInitPlayer() {
            R !== "canvas" && C("loading");
          }
        },
        children: /* @__PURE__ */ s(
          "div",
          {
            ...g,
            ref: (I) => {
              p !== null && (typeof p == "function" ? p(I) : p.current = I);
            },
            children: b === void 0 ? /* @__PURE__ */ s(Z, {}) : /* @__PURE__ */ q(A, { children: [
              D,
              /* @__PURE__ */ s(
                et,
                {
                  title: g.title,
                  autoplay: r,
                  playsinline: m,
                  videoUrl: b,
                  previewImageUrl: x,
                  loading: t,
                  showPreview: j,
                  renderer: R,
                  status: P,
                  onStatusChange: C,
                  onPreviewImageUrlChange: $
                }
              )
            ] })
          }
        )
      }
    );
  }
);
rt.displayName = "Vimeo";
export {
  rt as Vimeo,
  ot as VimeoContext,
  tt as requestFullscreen
};
