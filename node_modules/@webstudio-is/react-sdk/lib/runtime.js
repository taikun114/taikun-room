// src/context.tsx
import { createContext, useContext, useMemo } from "react";
import {
  createJsonStringifyProxy,
  isPlainObject
} from "@webstudio-is/sdk/runtime";
var ReactSdkContext = createContext({
  assetBaseUrl: "/",
  imageLoader: ({ src }) => src,
  resources: {},
  breakpoints: [],
  onError: (error) => {
    console.error(error);
  }
});
var useResource = (name) => {
  const { resources } = useContext(ReactSdkContext);
  const resource = resources[name];
  const resourceMemozied = useMemo(
    () => isPlainObject(resource) ? createJsonStringifyProxy(resource) : resource,
    [resource]
  );
  return resourceMemozied;
};

// src/hook.ts
var getClosestInstance = (instancePath, currentInstance, closestComponent) => {
  let matched = false;
  for (const instance of instancePath) {
    if (currentInstance === instance) {
      matched = true;
    }
    if (matched && instance.component === closestComponent) {
      return instance;
    }
  }
};

// src/variable-state.tsx
import { useState, useMemo as useMemo2 } from "react";
import {
  createJsonStringifyProxy as createJsonStringifyProxy2,
  isPlainObject as isPlainObject2
} from "@webstudio-is/sdk/runtime";
var useVariableState = (initialState) => {
  const [state, setState] = useState(initialState);
  const value = useMemo2(
    () => isPlainObject2(state) ? createJsonStringifyProxy2(state) : state,
    [state]
  );
  return [value, setState];
};

// src/page-settings-meta.tsx
import { useEffect, useState as useState2 } from "react";
import { jsx } from "react/jsx-runtime";
var isElementRenderedWithReact = (element) => {
  return Object.keys(element).some((key) => key.startsWith("__react"));
};
var isServer = typeof window === "undefined";
var Meta = (props) => {
  const [localProps, setLocalProps] = useState2();
  useEffect(() => {
    const selector = `meta[${props.name ? `name="${props.name}"` : `property="${props.property}"`}]`;
    let allMetas = document.querySelectorAll(selector);
    for (const meta of allMetas) {
      if (!isElementRenderedWithReact(meta)) {
        meta.remove();
      }
    }
    allMetas = document.querySelectorAll(selector);
    if (allMetas.length === 0) {
      setLocalProps(props);
    }
  }, [props]);
  if (isServer) {
    return /* @__PURE__ */ jsx("meta", { ...props });
  }
  if (localProps === void 0) {
    return;
  }
  return /* @__PURE__ */ jsx("meta", { ...localProps });
};
var PageSettingsMeta = ({
  url,
  host,
  siteName,
  pageMeta,
  imageLoader,
  assetBaseUrl
}) => {
  const metas = [];
  if (url !== void 0) {
    metas.push({
      property: "og:url",
      content: url
    });
  }
  if (pageMeta.title) {
    metas.push({
      property: "og:title",
      content: pageMeta.title
    });
  }
  metas.push({ property: "og:type", content: "website" });
  if (siteName) {
    metas.push({
      property: "og:site_name",
      content: siteName
    });
  }
  if (pageMeta.excludePageFromSearch) {
    metas.push({
      name: "robots",
      content: "noindex, nofollow"
    });
  }
  if (pageMeta.description) {
    metas.push({
      name: "description",
      content: pageMeta.description
    });
    metas.push({
      property: "og:description",
      content: pageMeta.description
    });
  }
  if (pageMeta.socialImageAssetName) {
    metas.push({
      property: "og:image",
      content: `https://${host}${imageLoader({
        src: `${assetBaseUrl}${pageMeta.socialImageAssetName}`,
        // Do not transform social image (not enough information do we need to do this)
        format: "raw"
      })}`
    });
  } else if (pageMeta.socialImageUrl) {
    metas.push({
      property: "og:image",
      content: pageMeta.socialImageUrl
    });
  }
  metas.push(...pageMeta.custom);
  const isTwitterCardSizeDefined = pageMeta.custom.some(
    (meta) => meta.property === "twitter:card"
  );
  if ((pageMeta.socialImageAssetName !== void 0 || pageMeta.socialImageUrl !== void 0) && isTwitterCardSizeDefined === false) {
    metas.push({ property: "twitter:card", content: "summary_large_image" });
  }
  return metas.map((meta, index) => /* @__PURE__ */ jsx(Meta, { ...meta }, index));
};

// src/page-settings-title.tsx
import { useEffect as useEffect2, useState as useState3 } from "react";
import { jsx as jsx2 } from "react/jsx-runtime";
var isServer2 = typeof window === "undefined";
var PageSettingsTitle = (props) => {
  const [localProps, setLocalProps] = useState3();
  useEffect2(() => {
    const selector = `head > title`;
    let allTitles = document.querySelectorAll(selector);
    for (const meta of allTitles) {
      if (!isElementRenderedWithReact(meta)) {
        meta.remove();
      }
    }
    allTitles = document.querySelectorAll(selector);
    if (allTitles.length === 0) {
      setLocalProps(props);
    }
  }, [props]);
  if (isServer2) {
    return /* @__PURE__ */ jsx2("title", { ...props });
  }
  if (localProps === void 0) {
    return;
  }
  return /* @__PURE__ */ jsx2("title", { ...localProps });
};

// src/page-settings-canonical-link.tsx
import { useEffect as useEffect3, useState as useState4 } from "react";
import { jsx as jsx3 } from "react/jsx-runtime";
var isServer3 = typeof window === "undefined";
var PageSettingsCanonicalLink = (props) => {
  const [localProps, setLocalProps] = useState4();
  useEffect3(() => {
    const selector = `head > link[rel="canonical"]`;
    let allLinks = document.querySelectorAll(selector);
    for (const meta of allLinks) {
      if (!isElementRenderedWithReact(meta)) {
        meta.remove();
      }
    }
    allLinks = document.querySelectorAll(selector);
    if (allLinks.length === 0) {
      setLocalProps(props);
    }
  }, [props]);
  if (isServer3) {
    return /* @__PURE__ */ jsx3("link", { rel: "canonical", ...props });
  }
  if (localProps === void 0) {
    return;
  }
  return /* @__PURE__ */ jsx3("link", { rel: "canonical", ...localProps });
};

// src/runtime.ts
var xmlNodeTagSuffix = "-ws-xml-node-fb77f896-8e96-40b9-b8f8-90a4e70d724a";
export {
  PageSettingsCanonicalLink,
  PageSettingsMeta,
  PageSettingsTitle,
  ReactSdkContext,
  getClosestInstance,
  useResource,
  useVariableState,
  xmlNodeTagSuffix
};
