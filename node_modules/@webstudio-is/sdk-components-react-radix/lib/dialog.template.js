import { jsxs as n, jsx as e } from "react/jsx-runtime";
import { LargeXIcon as p } from "@webstudio-is/icons/svg";
import { $ as l, PlaceholderValue as r, css as i } from "@webstudio-is/template";
import { radix as o } from "./shared/proxy.js";
import { zIndex as d, blur as m, width as u, spacing as t, maxWidth as w, borderWidth as $, colors as a, boxShadow as s, fontSize as c, lineHeight as y, letterSpacing as b, fontSizeLineHeight as x, borderRadius as f, opacity as g, height as h } from "./shared/theme.js";
import { getButtonStyle as D } from "./shared/styles.js";
const S = {
  category: "radix",
  description: "Displays content with an overlay that covers the window, triggered by a button. Clicking the overlay will close the dialog.",
  order: 4,
  template: /* @__PURE__ */ n(o.Dialog, { children: [
    /* @__PURE__ */ e(o.DialogTrigger, { children: /* @__PURE__ */ e(l.Button, { "ws:style": D("outline"), children: new r("Button") }) }),
    /* @__PURE__ */ e(
      o.DialogOverlay,
      {
        "ws:style": i`
          position: fixed;
          inset: 0;
          z-index: ${d[50]};
          background-color: rgb(255 255 255 / 0.8);
          backdrop-filter: ${m.sm};
          /* To allow positioning Content */
          display: flex;
          overflow: auto;
        `,
        children: /* @__PURE__ */ n(
          o.DialogContent,
          {
            "ws:style": i`
            width: ${u.full};
            z-index: ${d[50]};
            display: flex;
            flex-direction: column;
            gap: ${t[4]};
            margin: auto;
            max-width: ${w.lg};
            border: ${$.DEFAULT} solid ${a.border};
            background-color: ${a.background};
            padding: ${t[6]};
            box-shadow: ${s.lg};
            position: relative;
          `,
            children: [
              /* @__PURE__ */ n(
                l.Box,
                {
                  "ws:label": "Dialog Header",
                  "ws:style": i`
              display: flex;
              flex-direction: column;
              gap: ${t[2]};
            `,
                  children: [
                    /* @__PURE__ */ e(
                      o.DialogTitle,
                      {
                        "ws:style": i`
                font-size: ${c.lg};
                line-height: ${y.none};
                letter-spacing: ${b.tight};
                margin: 0;
              `,
                        children: new r("Dialog Title you can edit")
                      }
                    ),
                    /* @__PURE__ */ e(
                      o.DialogDescription,
                      {
                        "ws:style": i`
                font-size: ${c.sm};
                line-height: ${x.sm};
                color: ${a.mutedForeground};
                margin: 0;
              `,
                        children: new r("Dialog description text you can edit")
                      }
                    )
                  ]
                }
              ),
              /* @__PURE__ */ e(l.Text, { children: new r("The text you can edit") }),
              /* @__PURE__ */ e(
                o.DialogClose,
                {
                  "ws:label": "Close Button",
                  "ws:style": i`
              position: absolute;
              right: ${t[4]};
              top: ${t[4]};
              border-radius: ${f.sm};
              opacity: ${g[70]};
              display: flex;
              align-items: center;
              justify-content: center;
              height: ${h[4]};
              width: ${h[4]};
              border: 0;
              background-color: transparent;
              outline: none;
              &:hover {
                opacity: ${g[100]};
              }
              &:focus-visible {
                box-shadow: ${s.ring};
              }
            `,
                  children: /* @__PURE__ */ e(l.HtmlEmbed, { "ws:label": "Close Icon", code: p })
                }
              )
            ]
          }
        )
      }
    )
  ] })
};
export {
  S as meta
};
